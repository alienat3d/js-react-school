// * === Проверка типов с помощью PropTypes (155) === * \\

// * Вспомним что такое динамическая и статическая типизации. Многие разработчики любят разрабатывать свои приложения именно в статической типизации, т.к. они могут быть уверены, что данные всегда остаются в одном типе. Одна из популярных надстроек в данном ключе — Typescript и её соединяют с React JS при необходимости. Но это отдельная технология и потом лучше её отдельно освоить.
// ? Если же пока не нужен Typescript, но хотелось бы следить за типами данных и в пропсах внутри компонентов, то стоит использовать технологию propTypes. (Кстати, её также спрашивают на собеседованиях.)
// ? Раньше (до версии 15.5) эта технология включалась в Реакт по умолчанию, но теперь её необходимо устанавливать отдельным пакетом: {npm install --save prop-types}.
// ? После установки этого пакета мы сможем прописывать правила для проверки пропсов. Если они не подойдут по типу, то выскочит уведомление в консоли. [Работает это только в режиме development.]

// todo перейдём в [projects\react-marvel-wiki\src\components\charInfo\CharInfo.js]

// ? Можно ли с помощью PropTypes устанавливать пропсы по умолчанию? (Если, например, не было ничего передано, то поставить что-то по умолчанию?) Ответ: Да, так можно сделать при помощи defaultProps.

// todo А также домашняя работа в [projects\react-marvel-wiki\src\components\charList\CharList.js]

// |===:===:===:===>
/** links:
 *  (EN Свежая документация по static propTypes): https://react.dev/reference/react/Component#static-proptypes
*  (RU Документация по propTypes): https://ru.reactjs.org/docs/typechecking-with-proptypes.html
*  (propTypes на npmjs): https://www.npmjs.com/package/prop-types
*/