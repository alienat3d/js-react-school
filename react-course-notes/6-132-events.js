// * === События (events) (132) === * \\

// ? Это ещё одно из основополагающих понятий в реакте.
// Одно из событий мы уже только недавно использовали, это клик для простейшего изменения состояния приложения.

// * Итак, чтобы назначить обработчик события в реакте мы должны прописать событие в качестве аргумента в формате camelCase, например:
<button onClick={this.someFuncton}>Click!</button>

// Также мы можем назначать и другие события, вроде "onChange", "onSubmit" etc. 

// todo Потренируемся на [projects/react-project-1/src/App.js].

// ? addEventListener в реакт мы нигде не пишем. После указания атрибута события реакт сделает это за нас.

// ? Для отмены стандартного поведения элементов (например <a>) в реакт нужно использовать только preventDefault().

// * Важное замечание про "this", которое мы указываем и в стейтах и в пропсах, оно указывает на экземпляр класса. Это отдельная сущность, которая как бы отпочковывается от нашего общего класса-шаблона и с помощью ключевого слова "this" мы указываем на отдельный экземпляр класса, чтобы у каждого компонента были свои стейты и пропсы.

// |===:===:===:===>
/** links:
 * (EN Новая документация): https://react.dev/learn/responding-to-events
 * (Базовая документация): https://ru.reactjs.org/docs/handling-events.html
 * (Перевод новой документации): https://reactdev.ru/learn/managing-state/
 * (Слайдер из урока): https://codepen.io/suez/pen/OjGQza
 * (Счётчик из урока): https://codepen.io/sedlukha/pen/jdPMEq
 * */
