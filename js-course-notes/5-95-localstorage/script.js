'use strict';

// * === localStorage и сохранение данных без баз данных === * \\

// ? Эта технология позволяет сохранять данные на сайтах без работы с сервером и базами данных. И эта информация останется даже, если пользователь перезагрузит страницу или закроет браузер.
// ? По сути это тоже объект, встроенный в браузер и умеющий хранить данные. Точнее это свойство глобального объекта window.
// ? Этот объект уникален для каждого домена и это сделано с целью безопасности. Ведь JavaScript не может выходить за пределы вкладки, работать с другими вкладками или даже файлами на компьютере.
// ? И содержимое этого объекта можно найти в DevTools во вкладке Application. Там же есть и Local Storage и пока там пусто, но мы уже видим, что у него есть параметры key & value.

window.localStorage;

// * Примеры применения: если пользователь установил определённые настройки отображения сайта, то эта информация может быть помещена в Local Storage и при повторном захождении на сайт, эти настройки будут браться из данных, лежащих в Local Storage на компьютере этого пользователя. Или запомнить данные формы. Или запомнить время, на котором пользователь остановился в прошлый раз при просмотре видео и потом продолжить в с него. Примеров может быть большая масса.
// ? Главное помнить, что Local Storage существует лишь в пределах одного домена и служит для хранения каких-то локальных данных. Кстати максимальных размер его около 5 МБ информации. Обычно этого более чем хватает, но всё же стоит об этом помнить.

// * 1.0 Методы localStorage:
// * 1.1.0 setItem() — сделать новую запись. Этот метод очень похож например на setAttribute(). Здесь мы также первым аргументом передаём название (key) нашей записи, а вторым его значение (value).
localStorage.setItem('theme', 'dark');
// 1.1.1 Если же у нас в Local Storage уже есть одноимённый ключ, то его значение будет перезаписано.
localStorage.setItem('theme', 'light');

// * 1.2 getItem() — получить данные из Local Storage. Здесь уже только один аргумент - название того ключа, значение которого нужно получить.
console.log(localStorage.getItem('theme'));

// * 1.3 removeItem() — удалить какой-то ключ из Local Storage. Здесь тоже только один аргумент - название того ключа, который нужно удалить.
localStorage.removeItem('theme');

console.log(localStorage.getItem('theme'));

// * 1.4 clear() — полностью очищает Local Storage. Здесь аргументы не нужны.

// * ===:===:===:=== * //

// * 2.0 Теперь потренируемся, используя эту информацию на тестовой страничке с формой.
// 2.1 Сперва, как обычно, получим нужные нам элементы со страницы.
// 2.2.0 Итак, реализуем функционал, что если пользователь поставил галочку на чекбокс формы, то при перезагрузке страницы она останется стоять на нём (по умолчанию она не будет стоять).
// 2.2.1 Также нам нужно, чтобы если пользователь нажмёт кнопку "Change color", то цвет формы бы поменялся и оставался таким, даже если он перезагрузит страницу.
const checkbox = document.querySelector('#checkbox'),
  form = document.querySelector('form'),
  changeBtn = document.querySelector('#color');

// 2.3.0 Навесим обработчик события на чекбокс и мы могли бы указать событие "click", но всё же здесь будет уместнее "change", т.к. у нас происходит изменение состояния чекбокса.
// 2.3.1 Далее мы в коллбэк-функции обратимся к localStorage и при изменении чекбокса записывать в него эти изменения. Здесь самое типичное имя будет "isChecked", а значение — булево.
// 2.3.2 Напишем функционал, что когда пользователь зашёл на страницу — у него будет автоматическая проверка Local Storage и если у него есть ключ "isChecked", то чекбокс будет установлен в позицию "checked". Используем getItem() и если ключа "isChecked" не будет обнаружено, то вернётся "null", а null — означает false, значит проверку не пройдёт.
if (localStorage.getItem('isChecked') === 'checked') {
  checkbox.checked = true;
} else {
  checkbox.checked = false;
}


// 2.4.2 Но это, что касается клика по кнопке, но также, как и с чекбоксом нам здесь следует проверять, а есть ли в Local Storage такая запись. И если она есть, ты мы будем перекрашивать нашу форму.
if (localStorage.getItem('bg') === 'changed') {
  form.style.backgroundColor = 'green';
}

checkbox.addEventListener('change', () => {
  if (localStorage.getItem('isChecked') === 'checked') {
    localStorage.setItem('isChecked', 'unchecked');
  } else {
    localStorage.setItem('isChecked', 'checked');
  }
});

// * 2.4.0 Теперь попробуем что-то посложнее, изменим цвет по клику на кнопке "change color".
// 2.4.1 Она должна тоглить цвет формы. Т.е. мы здесь проверим, если внутри Local Storage ничего нет, то мы перекрасим форму в какой-то цвет. Но если она уже покрашена, то мы возвращаем ей белый цвет и удаляем ключ из Local Storage.
changeBtn.addEventListener('click', () => {
  if (localStorage.getItem('bg') === 'changed') {
    form.style.backgroundColor = 'white';
    localStorage.removeItem('bg');
    // localStorage.setItem('bg', ''); - как альтернатива, можно не удалять, а присвоить пустую строку, тогда значение затрётся и эффект будет тем же.
  } else {
    localStorage.setItem('bg', 'changed');
    form.style.backgroundColor = 'green';
  }
});

// ? Таким вот образом мы можем хранить в Local Storage любые настройки. Причём не только какие-нибудь примитивные, но даже объекты и массивы. Но в этом случае следует сделать сериализацию* данных (*процесс преобразования состояния объекта, то есть значений его свойств в форму, которая может храниться или передаваться), иначе мы получим надпись Object. Самый простой вариант - перевести в формат JSON, как мы это делали при работе с сервером.
// 3.0 Создадим для примера какой-то объект с информацией о какой-то персоне.
// 3.1 Допустим пользователь ввёл свои данные и теперь мы хотим сохранить эти данные в Local Storage.
const person = {
  name: 'Alex',
  age: 25
};

// 3.2 Сперва создадим какую-то переменную serializedPerson и в ней будет наш объект переведённый в JSON-формат.
const serializedPerson = JSON.stringify(person);

// 3.3 Теперь, когда у нас уже есть JSON, то мы можем поместить его в Local Storage.
localStorage.setItem('alex', serializedPerson);

console.log(JSON.parse(localStorage.getItem('alex')));

// |===:===:===:===>
/** links:
 * https://tproger.ru/articles/localstorage/
 * https://www.youtube.com/watch?v=7FbAM52h9QA
 * */