'use strict';

// * === Web Animations API === * \\

// ? Эта технология позволяет удобно создавать анимации на JS, на подобии как на CSS3, и управлять ими. Конечно она не заменит CSS3, но при определённых задачах может быть просто необходима (см. предыдущий урок про js-animation).

// * 1.0.0 Итак, для создания анимаций потребуется специальный конструктор Animation.
// 1.0.1 Создать его можно двумя способами: 1) более сложный, куда передаются настройки анимации "effect", течение времени на странице "timeline" и другие. Подробнее о всех возможностях в ссылке на MDN ниже.
new Animation();
// new Animation(effect);
// new Animation(effect, timeline);

// 1.0.2 2) более просто и быстрый — метод animate(), который сразу будет применяться к элементу и куда можно поместить настройки анимации.

const btnPhone = document.querySelector('#iphone'),
  btnMacbook = document.querySelector('#macbook'),
  images = document.querySelectorAll('img');

// * 1.1.0 Итак, рассмотрим на примере. У нас есть некая тестовая вёрстка с элементами, которые мы можем анимировать. Для этого сперва создадим переменную для анимации. Теперь, применив к картинке, которую мы хотим анимировать метод animate() пропишем внутрь него настройки.
// 1.1.1 Первым аргументом у нас будет массив объектов с ключевыми кадрами: начальная точка анимации, промежуточные точки и конечная точка. Другими словами план как анимация будет развиваться от начала до конца. Очень похоже на CSS3.
// 1.1.2 Далее мы прописываем настройки анимации.
// 1.1.3 Усложним задачу поместив анимацию в слушатель события по клику на кнопке с проверкой, что если такой анимации не существует, то она будет запускаться.
// 1.1.4 Пропишем также условие, что если анимация на паузе, то мы её запустим, а если она уже запущена, то мы поставим её на паузу. Для этого запрашиваем значение свойства анимации playState, которое содержит состояние анимации в данный момент. И тогда, если оно в значении "pause", то мы запустим её снова методом play().
let phoneAnimation;

btnPhone.addEventListener('click',() => { 
  if (!phoneAnimation) {
    phoneAnimation = images[0].animate([
      { translate: '0', rotate: '0', filter: 'opacity(100%)'},
      { translate: '0 300px', rotate: '180deg', filter: 'opacity(50%)'},
      { translate: '0 -50px', rotate: '270deg' },
      { translate: '0', rotate: '360deg', filter: 'opacity(100%)' }
    ],
    {
      duration: 3000,
      iterations: Infinity
    });
  } else if (phoneAnimation.playState === 'paused') {
    phoneAnimation.play();
  } else {
    phoneAnimation.pause();
  }
});

// |===:===:===:===>
/** links:
 * (Element.animate()): https://developer.mozilla.org/ru/docs/Web/API/Element/animate
 * (Дока): https://developer.mozilla.org/ru/docs/Web/API/Animation
 * */