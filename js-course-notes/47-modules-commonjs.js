'use strict';

// * === Сборка проекта, модульный Javascript & CommonJS === * \\

// ? Большие проекты могут состоять и большого количества JS-модулей и некоторые из них могут зависеть друг от друга или от других сторонних библиотек. И вот для того, чтобы собрать всё в один файл со скриптами в правильной порядке мы можем использовать несколько подходов.
// * Самые популярные это CommonJS и система export & import (появились в стандарте ES6).
// ? export & import будет в следующем уроке, а в этом остановимся на CommonJS подробно.

// ? Если посмотреть на код внутри сборки модулей, то мы также увидим уже знакомую реализацию через анонимные самовызывающиеся функции. Такие технологии, как CommonJS и система export & import как раз нужны для того, чтобы не прописывать это всё вручную.
// 1.0.0 Рассмотрим синтаксис CommonJS на примере:
// 1.0.1 Представим, что у нас есть два файла этот и ещё index.js и у нас есть две функции, которые мы хотели бы использовать в index.js.
function myModule() {
  this.hello = function () {
    console.log('Hello!');
  };

  this.bye = function () {
    console.log('Bye!');
  };
}
// 1.0.2 Теперь пропишем в скрипте, что нам нужно эту функцию экспортировать (т.е. дать возможность её где-то импортировать и использовать).
module.exports = myModule;

/* [якобы index.js]
const myModule = require('./путь к файлу'); - тут даже не обязательно ставить .js, сборщик и сам поймёт, но для наглядности всё же можно. 

const myModuleInstance = new myModule(); — здесь будет храниться экземпляр модуля.

Теперь можно брать и использовать функции, которые были прописаны в экспортированной функции myModule():

myModuleInstance.hello();
myModuleInstance.bye();
*/

// ? Но дело в том, что сам браузер совершенно не умеет собирать модули. Он просто выдаст ошибку, что не знает функции require(). Поэтому любая модульная система должна быть собрана в один результирующий файл. И здесь нам пригодится один из сборщиков, например самый популярный из всех Webpack.

// ? Чем отличается Gulp от Webpack?
// * Gulp это "task runner" или планировщик задач, при помощи него мы можем выполнять различные задачи, которые выполнятся при различных обстоятельствах. Сам по себе Gulp не может собирать скрипты или обрабатывать изображения, а лишь подключает к себе модули и выполняет какие-то задачи, когда от него это требуют. Webpack — это сборщик модулей. Они спокойно могут комбинироваться вместе.

// todo Рассмотрим настройки webpack.config.js на примере [./project-food/webpack.config.js]

// |===:===:===:===>
/** links:
 * https://largescalejs.ru/commonjs-modules/
 * https://webpack.js.org/configuration/devtool/
 * */
