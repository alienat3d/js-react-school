'use strict';

// == | Простой калькулятор. | == \\

// "return" возвращает какое-то значение. Как только функция дойдёт до строки с "return", она прекратит своё действие.
function calc(a, b) {
  return a + b;
  a - b; // Любой код после return будет недоступен, т.к. return завершает выполнение функции.
}

console.log(calc(15, 35));
console.log(calc(17, 29));
console.log(calc(2, 2));

// В этом и проявляется главная цель функций. Мы вызываем их с разными параметрами и таким образом мы избавляемся от дублирования кода.

// Но у "return" есть ещё одно применение. Как мы уже знаем, если внутри функции объявить переменную, то снаружи она видна не будет. А при помощи "return" мы можем вернуть\"вытащить наружу" из функции эту переменную и использовать вне функции.
function returnVariable() {
  const num = 333;
  return num;
}

const anotherNum = returnVariable();
console.log(anotherNum);

/** Function declaration - объявление функции */
// Такие функции, как и переменная var создаются до начала выполнений кода и выполняются вне зависимости от того, где они прописаны, например:

console.log(addition(30, 15));
console.log(addition(100, 25));

function addition(c, d) {
  return c + d;
} // Хотя функция объявлена после её вызова, она всё равно сработает.

/** Function expression - присвоение функции в переменную */
// Так как такая функция создаётся только тогда, когда выполнение кода до неё доходит, мы не можем вызвать её до того, как она будет объявлена, как в примере перед этим.
// console.log(multiplication(30, 15));
// console.log(multiplication(100, 25));

const multiplication = function (e, f) {
  return e * f;
};
// Поэтому такую функцию можно вызывать только после того, как мы её объявили.
console.log(multiplication(30, 15));
console.log(multiplication(100, 25));

// На начальном этапе всё же рекомендую использовать function declaration, чтобы избежать возможных ошибок в коде.

/** Современный стандарт ES6 и «стрелочные функции» */
// Такие функции не имеют своего контекста вызова (this) и чаще всего используются в обработчиках событий. Из-за этих особенностей использовать везде её нельзя.
// const calcAddition = (x, z) => { return x + z }; или в сокращённом виде (только для однострочного кода):
const calcAddition = (x, z) => x + z;
// Если функция содержит один аргумент, то можно даже записать следующим образом: 
const calcTimes10 = y => y * 10;

console.log(calcAddition(5, 7));
console.log(calcAddition(3, 2));

console.log(calcTimes10(20));

/** Методы и свойства у строк и чисел */
// Методы — это вспомогательные функции
// Свойства — это вспомогательные значения

// Свойство "length" наверное наиболее часто используемое в работе фронтенд-разработчика, т.к. оно позволяет получить длинну строки или других типов данных. Свойство пишется без круглых скобок в конце. Мы получаем описание строки. Мы не производим действий со строкой.
const str = 'test TEST';

console.log(str.length);

// А методы дают нам возможность изменять строку или другие типы данных.
console.log(str.toUpperCase());
console.log(str.toLowerCase());

// Методы чисел
const thirtyThree = '33.3px';

// Округляем до ближайшего целого числа
// console.log(Math.round(thirtyThree));

// Чтобы преобразовывать строки в число или число с дробными долями.
// Кстати parseInt также служит для преобразования чисел в другую систему исчисления. Для этого нужно её указать через запятую.
console.log(parseInt(thirtyThree));
console.log(parseFloat(thirtyThree));

// |===:===:===:===>
/** links:
 * (Документация про стрелочные функции): https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions
 * (Глава учебника про замыкание функции): https://learn.javascript.ru/closure
 * (Подробная статья про замыкание функции): https://medium.com/nuances-of-programming/%D1%8F-%D0%BD%D0%B8%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%BD%D0%B5-%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%BB-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%87%D0%B0%D1%81%D1%82%D1%8C-%D0%BF%D0%B5%D1%80%D0%B2%D0%B0%D1%8F-3c3f02041970
 * (Таблица классификации): https://drive.google.com/open?id=1Xuw7feRJ-2ZzE_U7E4MZMXh1HLVljcU8
*/