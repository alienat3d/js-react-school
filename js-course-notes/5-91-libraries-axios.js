'use strict';

// * === Библиотека Axios === * \\

// ? Что такое библиотека в общем? Это маленький кусочек кода или целый большой ресурс, который решает определённую проблему. Это может быть лишь один метод, добавляющий вам какой-то удобный функционал, а может быть целый фреймворк React JS, позволяющий быстро и удобно создавать SPA-сайты и приложения. Их объединяет то, что это уже готовое решение.

// ? Подключать их можно несколькими способами и их всегда можно подсмотреть в документации к библиотеке. Обычно это либо установка через менеджер пакетов (NPM, Bower, Yarn), либо мы можем вставить нужный скрипт с библиотекой в HTML-страницу.
// todo В последнем случае помним, что размещать скрипт библиотеки надо строго над нашим собственным скриптом.

// ? Axios — это библиотека для работы с запросами. Её частенько можно встретить в проектах.
// * Axios позволяет нам работать с сервером: получать, отправлять данные и выполнять другие действия. В неё завёрнуто много дополнительных возможностей, которые иначе приходилось бы прописывать вручную.
// Классический пример, если раньше мы проверки ошибок прописывали вручную:
/* if (!result.ok) {
  throw new Error(`Could not fetch ${url}, status: ${result.status}`);
} */
// А эта и подобные ей библиотеки уже используют такие проверки внутри себя. Тоже самое с конвертацией в JSON.
// Также она имеет возможность отменять запросы, поддерживает API промисов.

// ? В общем, если нет времени или желания заниматься собственноручно настройкой функции по отправке каких-то данных, то подключаем эту библиотеку и она сделает это за нас.

// ? Все библиотеки работают по похожим принципам и в качестве примера разбираем Axios:
// * Из документации (см. links) мы узнали, что у axios есть метод get(), который точно также, как и функция, которую мы создали getData() получает какие-то данные с сервера. И потом промисами обрабатываются определённые действия.
// Make a request for a user with a given ID
axios
  .get('/user?ID=12345')
  .then(function (response) {
    // handle success
    console.log(response);
  })
  .catch(function (error) {
    // handle error
    console.log(error);
  })
  .finally(function () {
    // always executed
  });
// * Также это может быть запрос с настройками:
// Optionally the request above could also be done as
axios
  .get('/user', {
    params: {
      ID: 12345,
    },
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  })
  .finally(function () {
    // always executed
  });
// * Или мы можем также что-то записывать на сервер методом post():
axios
  .post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone',
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });

// todo Что ж, перейдём в наш [project-food/js/script.js] и протестируем эту библиотеку на нашем проекте.

// |===:===:===:===>
/** links:
 * https://www.youtube.com/watch?v=5w5hmUgrTFo
 * https://github.com/axios/axios
 * https://cdnjs.com/
 * */
