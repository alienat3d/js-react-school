'use strict';

// * === Циклы в цикле ===

// Внутри одного цикла можно записать ещё один цикл. Однако, в этом случае, надо изменить изменить название переменной, чтобы не было коллизии имён.
// Негласный стандарт использовать для вложенных циклов для переменной литеру j, потом k, потом l и т.д. по-алфавиту. Но можно использовать конечно и другие названия переменной по желанию разработчика или code style компании.
// ? Но не нужно увлекаться чрезмерными вложенностям, когда их много, то это не только осложняет понимание кода, но и требует с каждой вложенностью всё большего количества памяти.
for (let i = 0; i < 3; i++) {
  console.log(i);

  for (let j = 0; j < 3; j++) {
    console.log(j);
  }
}

// * Классическая задачка программирования на вложенные циклы. Нам нужно при помощи кода нарисовать фигуру треугольника с использованием символа *.

let result = '';
const length = 7; // С помощью переменной ограничим количество рядов до 7.

// Создадим цикл в цикле, создающий подобную структуру "треугольник с прямым углом из астериксов" в консоли:
// *
// **
// ***
// ****
// *****
// ******
// *******

// Итак, на каждой строке мы формируем *. Причём на каждой строке * увеличиваются на 1. Мы ориентируемся на ту строку, которая идёт по номеру, например седьмая строка будет содержать 7 *.
for (let i = 1; i <= length; i++) {
  for (let j = 0; j < i; j++) {
    result += '*';
  } // Т.к. в j у нас всегда будет на 1 меньше, то будет добавляться лишь 1 *. В следующей итерации этот цикл сработает два раза, т.к. j = 0, а i = 2. И так далее.

  result += '\n'; // Внутри цикла берём переменную с пустой строкой внутри result и при помощи оператора += прибавляем к ней перенос на новую строчку специальной командой "\n" каждую итерацию.
}

console.log(result);

// Ещё один пример как из внутреннего вложенного цикла остановить, либо перейти к следующей итерации главного цикла. Создадим условие, что если k = 2, то самый главный\внешний цикл начнёт новую итерацию. Нам также понадобится метка - чёткое указание, где заканчивать и продолжать цикл. Перед первым\нужным циклом прописываем какое-то слово, это и будет меткой. Теперь её можем использовать после слова continue для указания итерацию какого цикла нам следует пропускать.
first: for (let i = 0; i < 3; i++) {
  console.log(`First level: ${i}`);

  for (let j = 0; j < 3; j++) {
    console.log(`Second level: ${j}`);

    for (let k = 0; k < 5; k++) {
      if (k === 2) continue first; // Если оператор continue заменить на break, то прервётся весь главный цикл с вложенными.

      console.log(`Third level: ${k}`);
    }
  }
}
// ? Такой приём может пригодится например в следующей задаче: У нас есть большой объём данных, который необходимо перебрать. Если на каком-то уровне вложенности мы находим интересующие данные, то перебор нужно остановить полностью.

// |===:===:===:===>
/** links:
 * (Документация по меткам): https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/label
*/