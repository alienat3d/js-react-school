// Существует негласное правило, что название функции должно быть глаголом с существительным к которому выполняется это действие.
// Бывают также функции и анонимные, которые используют для вызова функции здесь и сейчас один раз, потому имя им давать не обязательно.
// В круглые скобки мы ставим аргументы, с которыми и работаем, их может быть сколько угодно.
function showFirstMessage(text) {
  console.log(text);
}

// Вызов функции. Когда функция запустится, она возьмёт строку 'Hello World!' и подставит на место аргумента text и передаст в команду console.log().
showFirstMessage('Hello World!');

// Если объявить переменную внутри функции, то и видна она будет только внутри неё.
function myTestFunction() {
  let num = 10;
}
// Так как переменная 'num' у нас является локальной (находится внутри функции), поэтому нам выдаст ошибку.
console.log(num);

// Теперь переменная становится глобальной и мы её можем использовать внутри разных функций и изменять значение.
let number = 20; // глобальная переменная

function myTestFunction2(txt) {
  number = 10; // локальная переменная
}

myTestFunction2();
console.log(number);

// Но может быть и другая ситуация:
let a = 5;

// Здесь переменная 'a' это совершенно другая переменная, чем 'a' снаружи функции.
// Если закомментировать let a = 7;, то консоль выдаст нам дважды 5, т.к. console.log(a); внутри функции, не найдя нужной переменной, выйдет на уровень выше и начнёт искать её там. В итоге внешний и внутренний console.log(a) обратятся к одной и той же переменной и соответственно выдадут одинаковый результат.
function myTest() {
  // let a = 7;
  console.log(a);
}

myTest();
console.log(a);
// ? Что такое замыкание функции? Если внутри функции есть обращение к какой-либо переменной, функция сперва ищет эту переменную внутри себя. Если мы например вверху вызвали "console.log(a);", то сперва будет искать переменную "а" внутри этой функции, а потом уже во внешних переменных и так идёт до самого высшего уровня шаг за шагом.
// Замыкание — это функция со всеми её внешними переменными, которые ей доступны. Поэтому если мы удалим строчку "let a = 7;", то выведется "5" дважды. Потому что "console.log(a);" внутри функции сперва искал внутри своей функции, не нашёл такую переменную и пошёл искать выше вне функции.