import './app-filter.css';

// ? [142.2]
// * 1.1.0 Периодически понятие динамических стилей касается и объектов стилей, которые передаются в атрибут style. Для примера, представим, что в массиве кнопок одна из них содержит специальное поле, например "colored". И допустим, мы хотим, чтобы текст кнопки, у которой colored: true — должен меняться на золотистый цвет.
// 1.1.1 Для этого в кнопку добавим ещё один атрибут style. В него, в зависимости от значения свойства colored мы либо будем передавать объект стилей, либо нет.
const AppFilter = (props) => {
  const buttonsData = [
    { name: 'all', label: 'Все сотрудники', colored: false },
    { name: 'rise', label: 'На повышение', colored: true },
    { name: '> 100000', label: 'Зарплата > ₽100000', colored: false }
  ];
  // * 1.0.1 Или например здесь (формирование переменной clazz на основе условия тернарного оператора, куда помещался тот или иной класс):
  // ? 1.0.2 У нас постоянно будут ситуации, когда какой-то элемент становится активным, он будет как-то выделяться или выбранный товар подсвечиваться для пользователей и т.п. Особенно это касается компонентов, которые формируются через перебор, через тот же map(). Тут нам необходимо будет через условие найти определённую характеристику и на её основе уже формировать классы. Иногда это делается прямо внутри свойства (на примере app-filter в className={`btn ${clazz}`}), но лучше всё же вынести в отдельную переменную для наглядности и чистоты кода.
  // 1.1.2 Нам также нужно будет вытащить свойство "colored" из нашего объекта. А дальше используем тернарник в атрибуте style: если colored в значении true, то вернём объект с CSS-стилями, а если нет, то null, т.е. туда ничего не перепадёт.
  // ? Такое может пригодится, если у нас вообще файлов стилей, нет доступа к ним или подключена какая-то сторонняя библиотека стилей. Тогда можно добавлять какие-то небольшие участки стилей при помощи такого вот синтаксиса. Но всё же, если есть возможность, то лучше работать через CSS-классы.
  const buttons = buttonsData.map(({ name, label, colored }) => {
    const active = props.filter === name;
    const clazz = active ? 'btn-light' : 'btn-outline-light';
    
    // ? И также лучше вынести тернарный оператор в отдельную переменную, даже если свойство всего одно.
    const style = colored ? { color: 'gold' } : null;

    return (
      <button
        className={`btn ${clazz}`}
        type="button"
        tabIndex={2}
        key={name}
        onClick={() => props.onFilterSelect(name)}
        /* style={colored ? {color: 'gold'} : null} */
        style={style} >
        {label}
      </button>
    )
  })

  return (
    <div className="btn-group">
      {buttons}
    </div>
  );
}

export default AppFilter;