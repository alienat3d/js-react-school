import EmployeesListItem from "../employees-list-item/employees-list-item";

import './employees-list.css';
// ? [135]

// * 1.0.0 Займёмся функционалом удаления сотрудников. Для этого в нашем приложении есть специальная кнопка "красная корзинка", по клику на которую будет удаляться сотрудник, которому она соответствует. Логично, что в реальном приложении, когда мы удаляем сотрудника, то он должен также удалиться и из базы данных на сервере. Последнего мы пока не умеем, но рассмотрим пока эту идею локально.
// 1.0.1 Сразу же возникают некоторые вопросы, потому, что сейчас эта кнопка "корзинка" находится в определённом компоненте, который не связан с данными, лежащими выше по иерархии. Чтобы их связать и отслеживать эти действия мы можем написать свои собственные события, которые будут использоваться внутри нашего приложения.
// 1.0.2 Итак, когда мы инициируем удаление сотрудника кликом на кнопку "корзинку", соответственно эта часть удалится из данных "data", затем реакт увидит эти изменения и перерисует наше приложение, точнее только его изменённую часть.
// 1.0.3 Вспомним, что в пропсы мы можем передавать всё, что угодно, включая функции. Ок, после записи функции onDelete() в компонент мы можем как-то её использовать.
// ? Это наглядный пример того, как можно связать несколько компонентов, находящихся на разных уровнях. Из корневого элемента EmployeesList мы прокинули ниже в элемент EmployeesListItem проп с функцией onDelete().
// todo [перейдём в employees-list-item\employees-list-item.jsx]
// * 1.0.6 Раз это сработало между этими компонентами, то почему бы нам не перейти в главный компонент app и не передать EmployeesList, там где мы уже передавали массив данных "data", проп onDelete.
// todo [перейдём в employees-list-item\app.jsx]
// * 1.0.7 Теперь, когда мы компоненту EmployeesList предоставили проп "onDelete" с функцией в app.jsx. То здесь мы можем уже использовать эту функцию в деструктуризации. Теперь мы передадим её дальше на запуск в проп "onDelete" ниже в коллбэк-функцию.
// 1.0.8 Т.к. в app.jsx эта функция принимает аргумент 'id', то и здесь мы можем её вызвать с каким-то аргументом. Причём здесь у нас уже есть id, который закреплён за каждым сотрудником в нашей локальной "базе данных" массиве "data". Просто передадим его туда. Теперь мы получаем уникальный id каждого из сотрудников, а произошло это благодаря приёму "передача пропа" (property drill).

const EmployeesList = ({ data, onDelete }) => {
  const elements = data.map(item => {
    const {id, ...itemProps} = item;

    return (
      <EmployeesListItem 
        key={id} 
        {...itemProps} 
        onDelete={() => onDelete(id)}/>
    );
  });
  return (
    <ul className="app-list list-group">
      {elements}
    </ul>
  );
}

export default EmployeesList;