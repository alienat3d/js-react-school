// import React from 'react';
import { Component } from 'react';
import './App.css';

// todo Начало в [react-course-notes/6-127-component-properties]

// * 1.0.0 Тренируемся писать реакт-пропсы.
// 1.0.1 Такие вот заготовки будут встречаться постоянно, в которые требуется передать какие-то базовые данные, чтобы что-то отобразить. Для этого вводим в функцию аргумент props. Props — это некий объект с теми данными, которые мы в него передадим для отображения компонента.
/* function WhoAmI(props) {
  return (
    <div>
      <h1>My name is {props.name} {props.surname}.</h1>
      <a href={props.link}>My LinkedIn Profile</a>
    </div>
  );
} */
// * 1.1.0 В современном коде будет часто выглядеть чуть иначе, те же пропсы могут быть уже деструктурированы на отдельные части. Так мы чуточку повышаем понятность и читабельность кода.
function WhoAmI({name, surname, link}) {
  return (
    <div>
      <h1>My name is {name.firstName} {surname}.</h1>
      <a href={link()}>My LinkedIn Profile</a>
    </div>
  );
}
// * 1.0.2 Теперь мы должны указать определённые атрибуты. И объект props будет формироваться из тех атрибутов, что мы передадим в наш компонент.
// ? 1.0.3 Есть компоненты, которые не используют внутри себя пропсы и это нормально. Тогда мы не передаём этот аргумент. Однако этот объект props всё равно будет сформирован и его можно будет увидеть, если вывести этот компонент как объект в консоль.
// * 1.0.4 Значения этих атрибутов "пропсов" неизменяемые, подходят только для чтения. Поменять его мы просто не сможем, чтобы динамически поменять значение пропса, нужно полностью перерендерить этот компонент. Как работать динамически с такими данными мы узнаем в следующих уроках.
// todo Одно из важнейших правил реакта: компонент не изменяет свои пропсы. Пропс мы используем в компоненте, но никогда в них не записываем внутри него же. Также и элементы компонента как только они были созданы, то всё их изменить нельзя. Чтобы изменить нужно целый компонент отрендерить заново. ↑
// ? А если компонент будет сильно разрастаться, то нужно будет его разделить на отдельные кусочки.

// * 1.2.0 Что именно можно передавать в качестве пропсов? Да что угодно! Даже объект. Или даже функцию (и они действительно довольно часто нужны). 
// ! Однако помним, что сам объект вставлять нельзя и если записать сам объект, а не его свойство, то получим ошибку.
function App() {
  return (
    <div className="App">
      {/* <WhoAmI name={{firstName: 'Al'}} surname='Tsaplin' link='https://www.linkedin.com/in/altdev/'/>
      <WhoAmI name={{firstName: 'John'}} surname='Smitters' link='https://www.linkedin.com/in/smitters/'/> */}
      <WhoAmI name={{firstName: 'Al'}} surname='Tsaplin' link={() => {return 'https://www.linkedin.com/in/altdev/'}}/>
    </div>
  );
}

export default App;
