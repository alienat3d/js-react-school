'use strict';

// == | Простой калькулятор. | == \\

// "return" возвращает какое-то значение. Как только функция дойдёт до строки с "return", она прекратит своё действие.
function calc(a, b) {
  return a + b;
}

console.log(calc(15, 35));
console.log(calc(17, 29));
console.log(calc(2, 2));

// Вы этом и проявляется главная цель функций. Мы вызываем их с разными параметрами и таким образом мы избавляемся от дублирования кода.

// Но у "return" есть ещё одно применение. Как мы уже знаем, если внутри функции объявить переменную, то снаружи она видна не будет. А при помощи "return" мы можем вернуть\"вытащить наружу" из функции эту переменную и использовать вне функции.
function returnVariable() {
  let num = 333;
  return num;
}

let anotherNum = returnVariable();
console.log(anotherNum);

/** Function declaration - объявление функции */
// Такие функции, как и переменная var создаются до начала выполнений кода и выполняются вне зависимости от того, где они прописаны, например:

console.log(addition(30, 15));
console.log(addition(100, 25));

function addition(c, d) {
  return c + d;
}

/** Function expression - присвоение функции в переменную */
// Так как такая функция создаётся только тогда, когда выполнение кода до неё доходит, мы не можем вызвать её до того, как она будет объявлена, как в примере перед этим.
// console.log(multiplication(30, 15));
// console.log(multiplication(100, 25));

let multiplication = function (e, f) {
  return e * f;
};
// Поэтому такую функцию можно вызывать только после того, как мы её объявили.
console.log(multiplication(30, 15));
console.log(multiplication(100, 25));

// На начальном этапе всё же рекомендую использовать function declaration, чтобы избежать возможных ошибок в коде.

/** Современный стандарт ES6 и «стрелочные функции» */
// Такие функции не имеют своего контекста вызова и чаще всего используются в обработчиках событий.
let calcAddition = (x, z) => x + z;

console.log(calcAddition(5, 7));
console.log(calcAddition(3, 2));

/** Методы и свойства у строк и чисел */
// Методы — это вспомогательные функции
// Свойства — это вспомогательные значения

// Свойство "length" наверное наиболее часто используемое в работе фронтенд-разработчика, т.к. оно позволяет получить длинну строки или других типов данных. Свойство пишется без круглых скобок в конце. Мы получаем описание строки. Мы не производим действий со строкой.
let str = 'test TEST';

console.log(str.length);

// А методы дают нам возможность изменять строку или другие типы данных.
console.log(str.toUpperCase());
console.log(str.toLowerCase());

// Методы чисел
let thirtyThree = '33.3px';

// Округляем до ближайшего целого числа
// console.log(Math.round(thirtyThree));

// Чтобы преобразовывать строки в число или число с дробными долями.
// Кстати parseInt также служит для преобразования чисел в другую систему исчисления. Для этого нужно её указать через запятую.
console.log(parseInt(thirtyThree));
console.log(parseFloat(thirtyThree));
