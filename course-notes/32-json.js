'use strict';

// * === Формат JSON === * \\
// Изначально появился в JavaScript, но теперь может уже использоваться любым ЯП.
// Это набор пар ключ: значение, как и в объекте.
// Все строки обязательно должны быть в двойных кавычках.
// В качестве значений могут быть объекты, массивы, числа, строки, логические значения или null.
// В них может храниться например небольшая база данных.
// * 1.1 Разберём на практике: Представим, что этот объект нужно передать на сервер. Напрямую мы объекты отправлять не можем, нам нужно сперва перевести их в формат понятный серверной части (или бэкэнду).
// ? Все современные браузеры имеют встроенные объекты JSON для работы с этими данными. В них есть как свойства, так и методы. Например метод stringify(), который поможет нам перевести объект в нужный для передачи на сервер формат.
const person = {
  name: 'Al',
  phone: '+1234567890',
  parents: {
    mom: 'Margo',
    dad: 'Slava'
  }
};
// * 3.1 В данном случае наш объект сперва трансформируется в JSON при помощи метода stringify и потом снова развернётся в объект, но уже будет присвоен как новый объект, а не ссылкой, как если бы мы написали "const clone = person;".
// const clone = person;
const clone = JSON.parse(JSON.stringify(person));
// 3.2 проверяем
clone.parents.mom = 'Ann';
console.log(person);
console.log(clone);
// ---
console.log(JSON.stringify(person));

// * 2 Рассмотрим другую ситуация, когда с сервера приходит JSON и его надо превратить в обычный объект, чтобы как-то использовать. Для этого есть второй метод parse().
console.log(JSON.parse(JSON.stringify(person)));
// |===:===:===:===>
/** links:
 *
 * */
