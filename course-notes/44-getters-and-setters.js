'use strict';

// * === Свойства акцессоры "геттеры" и "сеттеры" === * \\

// ? Свойства объектов делятся на два типа: данные и акцессоры. До этого все свойства, что мы использовали были свойствами данными, т.е. они просто описывали наш объект. Акцессоры это целый комплекс, который позволяет нам как присваивать, так и получать значения. При этом во внешнем коде они будут выглядеть как обычные свойства объекта.
// ? В свою очередь свойства акцессоры делятся на две группы: "геттеры" и "сеттеры". Как можно догадаться из названий: геттеры — позволяют нам получать значения из свойства, а сеттеры — записывать новые значения в свойство.
// 1.0 Рассмотрим на примере:
const person = {
  name: 'Al',
  age: '36',

  // 1.1 Теперь поработаем над свойство age в качестве геттера. Для этого пишем оператор get и название нового геттера. Далее внутри используем return для вывода значения и через контекстный вызов this обратимся к age. Теперь, когда мы будем вызывать userAge() мы получим возраст записанный в объекте.
  get userAge() {
    return this.age;
  },
  // 1.3 В пару к геттеру установим также и сеттер. Он обязательно принимает какой-то аргумент внутрь себя. И его мы будем подставлять значением в наше свойство age через оператор контекстного вызова "this"
  set userAge(num) {
    this.age = num;
  }
};
// 1.2 Внимание, мы не ставим "()", т.к. геттер предполагает, что мы можем работать с ним, как с обычным свойством.
person.userAge = 30;
console.log(person.userAge);

// ? Кстати, если убрать одно из таких свойств, то оно не будет больше в доступе и мы получим ошибку.

// Геттеры и сеттеры можно использовать в более объёмных скриптах и функциях, например получать в геттер можно не только возраст, но и имя и другие доп. модификации. Если это, например, конвертер валют, то мы можем преобразовывать сразу в ту валюту, которая нас интересует.
// А самый частый приём использования подобных свойств это инкапсуляция (см. след. урок), это один из принципов ООП.

// |===:===:===:===>
/** links:
 * https://learn.javascript.ru/property-accessors
 * */
