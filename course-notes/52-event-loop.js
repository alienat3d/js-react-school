'use strict';

// * === Событийный цикл (event loop) === * \\

// ? 1.0.0 Чтобы более полно разобраться с тем что такое синхронный и асинхронный код нужно рассмотреть такое понятие как "event loop". Хотя это уже своего рода углубление во внутренности языка Javascript, но эту информацию довольно часто спрашивают на собеседованиях.

// * 1.0.1 Ок, перейдём к практике и решим задачку, которую могут спросить на собеседовании: «В каком порядке выведутся следующие выводы в консоль?»

console.log(1);

setTimeout(() => {
  
}, 2000);

setTimeout(() => {
  
}, 4000);

console.log(2);

// ? 1.1.0 Сначала запускается синхронный console.log(), затем запускается функция-таймер setTimeout(), которая говорит браузеру выполнить указанный кусочек кода через 2 секунды. Далее запускается подобная функция с таймером на 4 секунды и снова выполняется. И возвращаемся к функциям таймерам и ждём их выполнения. В реальном проекте будут постоянно работать комбинации как синхронного, так и асинхронного кода.
/* 1.1.1 Вспомним, что асинхронными функциями являются: 
  1) Все операции, которые запускаются с течением определённого времени (setTimeout & setInterval);
  2) Любые запросы на сервер (т.к. мы не знаем когда именно нам ответит сервер),
  3) Любые callback-функции (например обработчики событий).
*/

// * 1.2.0 По ссылке ниже можно перейти на специальный ресурс, наглядно показывающий что такое понятия "Event Loop", "Call Stack", "Web APIs" & "Callback Queue". Рассмотрим подробнее:
// ? 1.2.1 "Call Stack" — это вызовы функция, выполняющихся в данный момент. Это понятие нам попадалось уже в Dev Tools, там тоже есть такой раздел, где показано вызовы каких функций привели к данному результату.
// ? 1.2.2 "Web APIs" — хранилище браузера для промежуточных данных. Например, когда запускается setTimeout() туда запишется, что блок кода внутри неё должен выполнится через какое-то количество миллисекунд.
// ? 1.2.2 "Callback Queue" — все операции, которые выполняются в браузере становятся в очередь, т.к. параллельно они выполнятся не могут.
// ? 1.2.3 "Event Loop" — и всё вышеперечисленное и есть т.н. "событийный цикл".

// 1.2.4 Если мы перейдём по ссылке, то там найдём подобный код тому, что у нас в папке 5-34-event-loop, но написанный в jQuery.


// |===:===:===:===>
/** links:
 * (Ресурс из урока) http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D
 * */
