'use strict';

let money, date;

function start() {
  money = +prompt('Ваш бюджет на месяц?', '');
  date = +prompt('Введите дату в формате YYYY-MM-DD', '');

  // Пишем проверку, чтобы ввод был числом, не был пустым и нельзя было отменить этот ввод.
  // 'isNaN()' метод возвращающий true, если находит буквы или строку, т.е. не цифры. А значит скрипт будет работать дальше.
  // Продолжаем строить логическую цепочку при помощи оператора "или" ("||") и сравниваем с пустой строкой, чтобы исключить занесение пользователем пустого значения.
  // Далее сравниваем с null, чтобы пользователь не смог продолжить, нажав кнопку отмена.
  // Итак, если одно из условий выполняется мы будем снова и снова задавать пользователю вопрос "Ваш бюджет на месяц?", пока ответ не удвлетворит нашим требованиям.
  while (isNaN(money) || money == '' || money == null) {
    money = +prompt('Ваш бюджет на месяц?', '');
  }
}
start();

let appData = {
  budget: money,
  costs: {},
  optionalCosts: {},
  income: [],
  dateData: date,
  savings: false,
};

// appData.costs.a1 = a2;
// appData.costs.a3 = a4;

for (let i = 0; i < 2; i++) {
  let a = prompt('Введите обязательную статью расходов в этом месяце', ''),
    b = +prompt('Во сколько обойдется?', '');

  // Чтобы создать новое свойство или метод у объекта есть 2 способа. Это через "." или "[]".
  // Если до того мы использовали ".", то сейчас так сделать не сможем. Ведь мы уже сюда передаём переменную. Но если мы используем "[]", то свойство может содержать любую строку.
  // Таким образом ответ пользователя на вопрос 'Введите обязательную статью расходов в этом месяце' будет записан в виде свойства нашего объекта "costs".
  // И когда мы получили значение от пользователя, мы должны получить от него ответ во сколько это обойдётся. Таким образом мы создали пару "ключ - значение".

  // Хоть данная проверка на то, что ответ приходит в виде строки не обязательна, ведь мы используем prompt, а та ответ всегда приходит в виде строки. Но для тренировки.
  // Также, не забываем, что если пользователь нажмёт Отмена, то мы получит тип данных null. Значит надо и на это проверить. Таким образом, если пользователь отменит действие, то это условие уже не выполнится.
  // Также, пользователь мог бы оставить строку пустой. Оставим провреку, которая запретит пользователю оставлять пустой переменную a & b.
  // Ещё может быть задача ограничить доступное пользователю количество символов в ответе. Например, чтобы ограничит ответ макс. 50 символами.
  if (
    typeof a === 'string' &&
    typeof a != null &&
    typeof b != null &&
    a != '' &&
    b != '' &&
    a.length < 50
  ) {
    console.log('It works!');
    appData.costs[a] = b;
  } else {
    i = --i;
  }
}

appData.moneyPerDay = appData.budget / 30;

alert('Ежедневный бюджет: ' + appData.moneyPerDay);

// Выведем уровень достатка человека

if (appData.moneyPerDay < 100) {
  console.log('Минимальный уровень достатка');
} else if (appData.moneyPerDay > 100 && appData.moneyPerDay < 2000) {
  console.log('Средний уровень достатка');
} else if (appData.moneyPerDay > 2000) {
  console.log('Высокий уровень достатка');
} else {
  console.log('Произошла ошибка');
}
