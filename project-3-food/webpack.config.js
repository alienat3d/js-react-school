'use strict';

let path = require('path');
// "mode" - отвечает за режим работы Webpack, есть три режима "development" & "production". "development" работает чуть быстрее, т.к. меньше оптимизирует код, а "production" соответственно уже делает намного больше для конечной выдачи продукта на сервер. Также есть "none", чтобы вообще отключить какую либо оптимизацию кода (обычно им никто не пользуется).
// "entry" (entry point) — тот (или те) файл(ы), который(-е) с которого начинается чтение кода. Здесь мы пропишем все импорты модулей. Если нам нужно использовать несколько файлов, то мы просто создадим объект.
// "output" (exit point) - создаётся только в виде объекта, конфигурация файлы, который выдаст нам Webpack после всех обработок. Его мы и подключим к HTML. Переменная "__dirname" указывает на корень папки.
// "watch" - если в положении true, то будет следить за изменениями файлов и пересобирать сборку. Его можно настроить более гибко, если нужно.
// "devtool" - здесь мы подключим "карты кода", чтобы можно было через Dev Tools найти в каком именно файлике, подключенном в виде модуля произошла ошибка или находится функционал. У него могут быть разные значения, которые в основном влияют на вид и скорость работы. (см. доку)
// "module" - настройки модулей. Например можно установить Babel в качестве модуля Webpack. Ну или подключить какие-то другие модули. (см. соотв. доку)
// ? "plugins" - подключение различных плагинов, однако используется не так часто, т.к. основные ключевые плагины уже есть в стандартных настройках Webpack.
module.exports = {
  mode: 'development',
  entry: './js/main.js',
  output: {
    filename: 'bundle.js',
    path: __dirname + '/js/dist'
  },
  watch: true,

  devtool: 'source-map',

  module: {
    rules: [
      {
        test: /\.m?js$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [['@babel/preset-env', {
              debug: true,
              corejs: 3,
              useBuiltIns: 'usage'
            }]]
          }
        }
      }
    ]
  }
};
